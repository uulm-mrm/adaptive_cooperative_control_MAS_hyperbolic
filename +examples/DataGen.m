zDomain = quantity.Domain("z", linspace(0, 1, 251));
simTime = 20;
tDomain = quantity.Domain("t", linspace(0, simTime, 5001));
syms z t;
basepath = "D:\Eigene Dateien\Uni\Masterarbeit\matarik\data";
% basepath = "C:\Users\xzb84\matarik\data";

Lambda = quantity.Symbolic(diag([1+z/3, 0.9*cos(0.8*z), -1, -3*exp(-z)]), zDomain, "name", "Lambda");
A = quantity.Symbolic([0, 0.8, -1+z/4, 0.2; 1/(z+1), 0, -0.4, 0; 0, 0, 0, -1; -2, z/2, 0, 0], zDomain, "name", "A");
Q0 = [1, 0.2; 0 1];
Q1 = [1 0; 0 0.6];

% C1 = [1 0 0 0; 0 1 0 0];
C1 = [1 0 0 0; 0 1 0 0];
C = quantity.Discrete.ones(1, zDomain)*[0 0 0 0; 0 0 1 0];
output = model.Output("controlOutput", "C1", C1, "C", C);
G1 = [0, 1, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 1, 0, 0, 0]*quantity.Symbolic(1+z, zDomain, "name", "G1");
G2 = [0, 0, 0, 0; 0, 0, 1, 0];
G3 = [0, 0, 0, 2; 0, 1, 0, 0];
G4 = [0, 0, 2, 0; 0, 0, 0, 0];

adjacencyMatrix = [0 0 0 0; 1 0 0 0; 0 1 0 1; 0 1 1 0];

S = [0 1; -1 0];
% P = eye(2);
P = [1 0; 0.8 0; 1.4 0; 0.6 0];

mas = MultiAgent(adjacencyMatrix, Lambda, "A", A, "output", output, "Q0", Q0, "Q1", Q1, ...
    "G1", G1*P, "G2", G2*P, "G3", G3*P, "G4", G4*P);
P = eye(2);
system = mas.network.agent(2);
x0 = quantity.Symbolic.ones([size(Lambda,1), 1], zDomain, "name", "x_0");

simData = system.simulate("t", tDomain.grid,...
    system.stateName.pde(1), x0);

tPlot = quantity.Domain("z", linspace(0, 1, 101));
zPlot = quantity.Domain("t", linspace(0, simTime, 1001));
plotVals = simData.agent2.x.changeDomain([tPlot, zPlot]);

% for indDim = 1:mas.N
%     data.unstable = export.ddd(...
%         'x', zPlot.grid, ...
%         'y', tPlot.grid, ...
%         'z', plotVals(indDim).valueDiscrete, ...
%         'filename', "unstable"+indDim, ...
%         'basepath', basepath ...
%         );
%     export.Data.exportAll(data);     
% end



splitDomain = tDomain.split(simTime/2);
S_r = quantity.Piecewise({[0 1; -1 0] * quantity.Discrete.ones(1, splitDomain(1)), [0 2; -2 0] * quantity.Discrete.ones(1, splitDomain(2))});
S_r = quantity.Discrete(S_r);
w = quantity.Piecewise({quantity.Discrete([sin(splitDomain(1).grid), cos(splitDomain(1).grid)], splitDomain(1)), ...
    quantity.Discrete([sin(2*splitDomain(2).grid), cos(2*splitDomain(2).grid)], splitDomain(2))});
w = quantity.Discrete(w);
P_r = eye(2);

arf = ReferenceObserver(adjacencyMatrix, 2, 4, 4, 4, 4);

simDataRef = arf.simulate(w, S_r);

for indAgent = 1:mas.N
    S_rObs.("agent" + indAgent) = simDataRef.("agent" + (indAgent-1)).S;
end

for indAgent = 1:mas.N
    S_rTrue.("agent" + indAgent) = S_r;
end
% distOde = ss(S, zeros(size(S,1)), P, []);
% d = stateSpace.simulate(distOde, zeros(size(S,1), length(tDomain.grid)), tDomain.grid, [0;1]);
% d = quantity.Discrete(d, tDomain);
distStateOde = ss(S, zeros(size(S,1)), eye(size(S)), []);
v = stateSpace.simulate(distStateOde, zeros(size(S,1), length(tDomain.grid)), tDomain.grid, [0;1]);
v = quantity.Discrete(v, tDomain);
d = v;
dPlot = [1 0; 0.8 0; 1.4 0; 0.6 0]*v;
%                   
% data.leaderSig = export.dd(...
%             'M', [tDomain.grid, w(1).valueDiscrete, w(2).valueDiscrete], ...
%             'header', {'t', 'r1', 'r2'}, ...
%             'filename', 'leaderSig', ...
%             'basepath', basepath ...
%             );
data.dist = export.dd(...
            'M', [tDomain.grid, dPlot(1).valueDiscrete, dPlot(2).valueDiscrete, dPlot(3).valueDiscrete, dPlot(4).valueDiscrete], ...
            'header', {'t', 'd1', 'd2', 'd3', 'd4'}, ...
            'filename', 'dist', ...
            'basepath', basepath ...
            );
%         
[systemTarget, controller] = mas.feedforwardControl(S_rObs, P_r, S, P);
[systemTarget, controllerConstSr] = mas.feedforwardControl(S_rTrue, P_r, S, P);
        
Q = controller.PI_wPolynomCoefficients.agent2;
Qplot = (0:length(Q)-1).';
indPlot = {"k"};
for i = 1:size(Lambda,1)
    for j = 1:size(Lambda,1)
        qplot = [];
        for k = 1:length(Q)
           qplot = [qplot; sqrt(int(abs(Q{k}(i,j)).^2))];
        end
        Qplot = [Qplot, qplot];
        indPlot{end + 1} = "Q"+((i-1)*size(Lambda,1) + j);
    end
end
data.Q = export.dd(...
            'M', Qplot, ...
            'header', indPlot, ...
            'filename', 'Qkoeff', ...
            'basepath', basepath ...
            );
        

distObserver = DisturbanceObserver(mas, S, P, "c_", 6);



simulationSetting = {'t', tDomain.grid};
ic = {"agent1.x", quantity.Symbolic(ones(size(Lambda,1), 1), zDomain),...
    "agent2.x", quantity.Symbolic(ones(size(Lambda,1), 1), zDomain),...
    "agent3.x", quantity.Symbolic(ones(size(Lambda,1), 1), zDomain),...
    "agent4.x", quantity.Symbolic(ones(size(Lambda,1), 1), zDomain)};

simDataStable = mas.simulate(simulationSetting, ic, controller, {}, struct([]));
tPlot = quantity.Domain("z", linspace(0, 1, 101));
zPlot = quantity.Domain("t", linspace(0, 10, 1001));
plotVals = simDataStable.agent2.x.changeDomain([tPlot, zPlot]);
for indDim = 1:mas.N
    data.("stable"+indDim) = export.ddd(...
        'x', zPlot.grid, ...
        'y', tPlot.grid, ...
        'z', plotVals(indDim).valueDiscrete, ...
        'filename', "stable"+indDim, ...
        'basepath', basepath ...
        );
      
end

ic = {"agent1.x", quantity.Symbolic(zeros(size(Lambda,1), 1), zDomain),...
    "agent2.x", quantity.Symbolic(zeros(size(Lambda,1), 1), zDomain),...
    "agent3.x", quantity.Symbolic(zeros(size(Lambda,1), 1), zDomain),...
    "agent4.x", quantity.Symbolic(zeros(size(Lambda,1), 1), zDomain)};


exogenousSignals = {"agent1.reference", w, "agent2.reference", w, "agent3.reference", w, "agent4.reference", w};
simDataTracking = mas.simulate(simulationSetting, ic, controllerConstSr, exogenousSignals, struct([]));
data.refTrack = export.dd(...
            'M', [tDomain.grid, simDataTracking.agent1.controlOutput(1).valueDiscrete,...
            simDataTracking.agent1.controlOutput(2).valueDiscrete], ...
            'header', {'t', 'y1', 'y2'}, ...
            'filename', 'refTrack', ...
            'basepath', basepath ...
            );
zeroSig = quantity.Discrete.zeros([size(S,1), 1], tDomain); 
zeroSigd = quantity.Discrete.zeros([size(d,1), 1], tDomain);   
exogenousSignals = {'disturbance', [zeroSigd; d; d; zeroSigd], "disturbanceState", [zeroSig; v; v; zeroSig]};
simDataRejection = mas.simulate(simulationSetting, ic, controllerConstSr, exogenousSignals, struct([]));
data.distRejection = export.dd(...
            'M', [tDomain.grid,simDataRejection.agent2.controlOutput(1).valueDiscrete,...
            simDataRejection.agent2.controlOutput(2).valueDiscrete,...
            simDataRejection.agent3.controlOutput(1).valueDiscrete,...
            simDataRejection.agent3.controlOutput(2).valueDiscrete,...
            simDataRejection.agent4.controlOutput(1).valueDiscrete,...
            simDataRejection.agent4.controlOutput(2).valueDiscrete,...
            zeroSig(1).valueDiscrete], ...
            'header', {'t', 'y11', 'y12', 'y21', 'y22', 'y31', 'y32', 'zeroSig'}, ...
            'filename', 'distRejection', ...
            'basepath', basepath ...
            );
data.refObserved = export.dd(...
            'M', [tDomain.grid,simDataRef.agent1.w(1).valueDiscrete - w(1).valueDiscrete,...
            simDataRef.agent1.w(2).valueDiscrete - w(2).valueDiscrete,...
            simDataRef.agent2.w(1).valueDiscrete - w(1).valueDiscrete,...
            simDataRef.agent2.w(2).valueDiscrete - w(2).valueDiscrete,...
            simDataRef.agent3.w(1).valueDiscrete - w(1).valueDiscrete,...
            simDataRef.agent3.w(2).valueDiscrete - w(2).valueDiscrete], ...
            'header', {'t', 'w11', 'w12', 'w21', 'w22', 'w31', 'w32'}, ...
            'filename', 'refObserved', ...
            'basepath', basepath ...
            );
data.SrObserved = export.dd(...
            'M', [tDomain.grid,simDataRef.agent1.S(1,1).valueDiscrete - S_r(1,1).valueDiscrete,...
            simDataRef.agent1.S(1,2).valueDiscrete - S_r(1,2).valueDiscrete,...
            simDataRef.agent1.S(2,1).valueDiscrete - S_r(2,1).valueDiscrete,...
            simDataRef.agent1.S(2,2).valueDiscrete - S_r(2,2).valueDiscrete,...
            simDataRef.agent2.S(1,1).valueDiscrete - S_r(1,1).valueDiscrete,...
            simDataRef.agent2.S(1,2).valueDiscrete - S_r(1,2).valueDiscrete,...
            simDataRef.agent2.S(2,1).valueDiscrete - S_r(2,1).valueDiscrete,...
            simDataRef.agent2.S(2,2).valueDiscrete - S_r(2,2).valueDiscrete,...
            simDataRef.agent3.S(1,1).valueDiscrete - S_r(1,1).valueDiscrete,...
            simDataRef.agent3.S(1,2).valueDiscrete - S_r(1,2).valueDiscrete,...
            simDataRef.agent3.S(2,1).valueDiscrete - S_r(2,1).valueDiscrete,...
            simDataRef.agent3.S(2,2).valueDiscrete - S_r(2,2).valueDiscrete], ...
            'header', {'t', 'S111', 'S112', 'S121', 'S122', 'S211', 'S212', 'S221', 'S222', 'S311', 'S312', 'S321', 'S322'}, ...
            'filename', 'SrObserved', ...
            'basepath', basepath ...
            );         
        
ic = {};
for indAgent = 1:mas.N
    ic{end+1} = "agent"+indAgent+".x";
    ic{end+1} = quantity.Symbolic([0; 0; 0; 0], zDomain);
    ic{end+1} = "agent"+indAgent+".observer.x";
    ic{end+1} = quantity.Symbolic([0; 0; 0; 0], zDomain);
end        
exogenousSignals = {'disturbance', [zeroSigd; d; d; zeroSigd]};    
simDataObsBasedDist = mas.simulate(simulationSetting, ic, controller, exogenousSignals, distObserver, false);

data.distObserved = export.dd(...
            'M', [tDomain.grid,simDataObsBasedDist.agent2.observer.disturbanceState(1).valueDiscrete - v(1).valueDiscrete,...
            simDataObsBasedDist.agent2.observer.disturbanceState(2).valueDiscrete - v(2).valueDiscrete,...
            simDataObsBasedDist.agent3.observer.disturbanceState(1).valueDiscrete - v(1).valueDiscrete,...
            simDataObsBasedDist.agent3.observer.disturbanceState(2).valueDiscrete - v(2).valueDiscrete,...
            simDataObsBasedDist.agent4.observer.disturbanceState(1).valueDiscrete,...
            simDataObsBasedDist.agent4.observer.disturbanceState(2).valueDiscrete], ...
            'header', {'t', 'v11', 'v12', 'v21', 'v22', 'v31', 'v32'}, ...
            'filename', 'distObserved', ...
            'basepath', basepath ...
            );
        
data.distRejObs = export.dd(...
            'M', [tDomain.grid,simDataObsBasedDist.agent2.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent2.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(2).valueDiscrete], ...
            'header', {'t', 'y11', 'y12', 'y21', 'y22', 'y31', 'y32'}, ...
            'filename', 'distRejObs', ...
            'basepath', basepath ...
            );

simDataObsBasedDist = mas.simulate(simulationSetting, ic, controller, exogenousSignals, distObserver, true);        
data.distRejObsLok = export.dd(...
            'M', [tDomain.grid,simDataObsBasedDist.agent2.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent2.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(2).valueDiscrete], ...
            'header', {'t', 'y11', 'y12', 'y21', 'y22', 'y31', 'y32'}, ...
            'filename', 'distRejObsLok', ...
            'basepath', basepath ...
            );  
        
vObsAgg = [];
for indAgent = 2:mas.N
   vObsAgg = cat(1, vObsAgg, simDataObsBasedDist.("agent"+indAgent).observer.disturbanceState);
end
vAgg = [v; v; zeroSig];
vTilAgg = kron(mas.H^(-1), eye(2))*vAgg;
vTilDiff = vTilAgg-vObsAgg;
M = [tDomain.grid];
header = {"t"};
for i = 1:length(vTilDiff)
    M = cat(2, M, vTilDiff(i).valueDiscrete);
    header{end+1} = "v"+i;
end
data.vTilDiff = export.dd(...
            'M', M, ...
            'header', header, ...
            'filename', 'distRejObsLokV', ...
            'basepath', basepath ...
            ); 

        
exogenousSignals = {"agent1.reference", simDataRef.agent0.w, "agent2.reference", simDataRef.agent1.w, "agent3.reference", simDataRef.agent2.w, "agent4.reference", simDataRef.agent3.w};        
simDataObsBasedDist = mas.simulate(simulationSetting, ic, controller, exogenousSignals, distObserver);        
data.refTrackObs = export.dd(...
            'M', [tDomain.grid,simDataObsBasedDist.agent2.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent2.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent3.controlOutput(2).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(1).valueDiscrete,...
            simDataObsBasedDist.agent4.controlOutput(2).valueDiscrete], ...
            'header', {'t', 'y11', 'y12', 'y21', 'y22', 'y31', 'y32'}, ...
            'filename', 'refTrackObs', ...
            'basepath', basepath ...
            );  

simDataStateObs = mas.simulate(simulationSetting, ic, struct(), exogenousSignals, distObserver, false);
tPlot = quantity.Domain("z", linspace(0, 1, 101));
zPlot = quantity.Domain("t", linspace(0, 10, 1001));
plotVals = simDataStateObs.agent2.x - simDataStateObs.agent2.observer.x;
plotVals = plotVals.changeDomain([tPlot, zPlot]);
for indDim = 1:mas.N
    data.("obsState"+indDim) = export.ddd(...
        'x', zPlot.grid, ...
        'y', tPlot.grid, ...
        'z', plotVals(indDim).valueDiscrete, ...
        'filename', "obsState"+indDim, ...
        'basepath', basepath ...
        );
      
end
        
export.Data.exportAll(data);
controlInput = model.Input("plant.control", "B1", eye(2));
disturbanceInput = model.Input("disturbance", "B", G1,...
                    "B0", G2, "B1", G3,...
                    "D", misc.Gain("disturbance", G4, "outputType", "controlOutput"));
systemTarget = model.Transport(Lambda, "A0", controller.backsteppingKernel.getA0Target(), ...
                "bc0", model.Output("plant.bc0", "C0", -mas.E2.'+Q0*mas.E1.'), ...
                "bc1", model.Output("plant.bc1", "C1", -mas.E1.'),...
                "output", output.backstepping(controller.backsteppingKernel, "inverse", true), ...
                "input", disturbanceInput + controlInput);
            
numerator = systemTarget.numeratorOfTransferFunction(linspace(-5i, 5i, 201));
invLambda = 1/Lambda;
phi = int(subs(invLambda, "z", "zeta"), "zeta", 0, "z");
eigVals = [eig([0 1; -1 0]); eig([0 2; -2 0])];

observable = true;
Ns = [];
for indEv = 1:length(eigVals)
    psi = expm(eigVals(indEv)*(phi - phi.subs("z", "zeta")));
    M = psi.subs("zeta", 0)*(mas.E1+mas.E2*Q0)...
        - int(psi*invLambda.subs("z", "zeta")*controller.backsteppingKernel.getA0Target().subs("z","zeta"), "zeta", 0, "z");
    N = output.out(M);
    Ns = [Ns, det(N)];
    if N == 0
       observable = false; 
    end
end
mas.network.agent(1).settlingTime
