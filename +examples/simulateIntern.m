zDomain = quantity.Domain("z", linspace(0, 1, 31));
tDomain = quantity.Domain("t", linspace(0, 5, 401));
splitDomain = tDomain.split(0);
syms z t;
% Lambda = quantity.Symbolic(diag([2+z, -(0.5+exp(-z))]), zDomain, "name", "Lambda");
Lambda = quantity.Symbolic(diag([3, -3]), zDomain, "name", "Lambda");
A = quantity.Symbolic([0, 0; 0, 0], zDomain, "name", "A");
Q0 = -1;
Q1 = 1;

% G1 = [0; -1]*quantity.Symbolic(1+z, zDomain, "name", "G1");
% G2 = [1];
% G3 = [1];
% G4 = [0];
g1 = quantity.Discrete(gaussmf(zDomain.grid, [0.1 0.5]), zDomain, "name", "G1");
G1 = [1; 1]*g1;
G2 = [0];
G3 = [0];
G4 = [0];

% output = model.Output("controlOutput", "C0", [1 -1]);
C = quantity.Discrete([ones(floor(length(zDomain.grid)/2), 1); zeros(floor(length(zDomain.grid)/2)+1, 1)]/2, zDomain);
% output = model.Output("controlOutput", "C", [C, -C]);
output = model.Output("controlOutput", "C", [1 0]*quantity.Discrete.ones(1, zDomain));

adjacencyMatrix = [0 0 0 0; 1 0 0 0; 0 1 0 1; 0 1 1 0];

mas = MultiAgent(adjacencyMatrix, Lambda, "A", A, "output", output, "G1", G1, "G2", G2, "G3", G3, "G4", G4, "Q0", Q0, "Q1", Q1, "diffusiveDisturbance", false, "nCoefRef", 5, "nCoefDist", 5);

% [systemTarget, feedforwardControlInput] = mas.feedforwardControl(0, 1, [0 1; 0 0], eye(2));
simulationSetting = {'t', tDomain.grid};
% w = quantity.Discrete([sin(tDomain.grid), cos(tDomain.grid)], tDomain);
w = quantity.Piecewise({quantity.Discrete([sin(splitDomain(1).grid), cos(splitDomain(1).grid)], splitDomain(1)), ...
    quantity.Discrete([sin(2*splitDomain(2).grid), cos(2*splitDomain(2).grid)], splitDomain(2))});
w = quantity.Discrete(w);
v = quantity.Discrete([sin(tDomain.grid), cos(tDomain.grid)], tDomain)*0;
zero = quantity.Discrete.zeros(size(v), tDomain);
agent2Dist = v;
agent2ObsDistIc = [0; 0];
agent2Ic = quantity.Symbolic([0; 0], zDomain);
agent2ObsIc = quantity.Symbolic([0; 0], zDomain);
ic = {"agent1.x", quantity.Symbolic([0; 5], zDomain),...
    "agent2.x", agent2Ic,...
    "agent3.x", quantity.Symbolic([0; 0], zDomain),...
    "agent4.x", quantity.Symbolic([0; 0], zDomain),...
    "agent1.observer.x", quantity.Symbolic([0; 5], zDomain),...
    "agent2.observer.x", quantity.Symbolic([0; 0], zDomain),...
    "agent3.observer.x", quantity.Symbolic([0; 0], zDomain),...
    "agent4.observer.x", quantity.Symbolic([0; 0], zDomain),...
    "S", [0 1; -1 0; 0 1; -1 0; 0 1; -1 0; 0 1; -1 0],...
    "v", [0; 0; agent2ObsDistIc; 0; 0; 0; 0]};
P = [1 0];
S = [0 1; -1 0];
distObs = AdaptiveDisturbanceObserver(mas, length(S), size(P,1), 2, "targetEvOde", [-1, -2], "nCoef", 5);
% v = quantity.Discrete.ones(1, tDomain);
% zero = quantity.Discrete.zeros(size(v), tDomain);
% agent2Dist = v;
% agent2ObsDistIc = 0;
% agent2Ic = quantity.Symbolic([0; 0], zDomain);
% agent2ObsIc = quantity.Symbolic([0; 1], zDomain);
% ic = {"agent1.x", quantity.Symbolic([0; 0], zDomain),...
%     "agent2.x", agent2Ic,...
%     "agent3.x", quantity.Symbolic([0; 0], zDomain),...
%     "agent4.x", quantity.Symbolic([0; 0], zDomain),...
%     "agent1.observer.x", quantity.Symbolic([0; 0], zDomain),...
%     "agent2.observer.x", quantity.Symbolic([0; 1], zDomain),...
%     "agent3.observer.x", quantity.Symbolic([0; 0], zDomain),...
%     "agent4.observer.x", quantity.Symbolic([0; 0], zDomain),...
%     "S", [0; 0; 0; 0],...
%     "v", [0; agent2ObsDistIc; 0; 0]};
% P = 1;
% S = 0;
% distObs = AdaptiveDisturbanceObserver(mas, length(S), P, 2, "targetEvOde", -4, "nCoef", 5);
% Sr = [0 1; -1 0];
Sr = quantity.Piecewise({[0 1; -1 0] * quantity.Discrete.ones(1, splitDomain(1)), [0 2; -2 0] * quantity.Discrete.ones(1, splitDomain(2))});
Sr = quantity.Discrete(Sr);
Pr = [1 0];
vPiece = quantity.Piecewise({quantity.Discrete([sin(splitDomain(1).grid), cos(splitDomain(1).grid)], splitDomain(1)), ...
    quantity.Discrete([sin(2*splitDomain(2).grid), cos(2*splitDomain(2).grid)], splitDomain(2))});
vPiece = quantity.Discrete(vPiece)*0;
% SLead = quantity.Discrete.ones(1,tDomain)*S;
SLead = quantity.Piecewise({quantity.Discrete.ones(1,splitDomain(1))*S, quantity.Discrete.ones(1,splitDomain(2))*S*2});
SLead = quantity.Discrete(SLead);

aggregatedDisturbance = [P*zero; P*vPiece; P*zero; P*vPiece/2];
aggregatedDisturbanceState = [zero; agent2Dist; zero; v/2];

shouldBeZero = diff(distObs.P_I*Lambda.subs("z", "zeta"), "zeta") + Lambda*distObs.P_I.diff("z") + A*distObs.P_I;
arf = ReferenceObserver(adjacencyMatrix, 2, 4, 4, 4, 4, 1, 2);
% exogenousInput = {"disturbance", aggregatedDisturbance, "S", S, "v", aggregatedDisturbanceState, "P", P};
% simData = tool.simulate(simulationSetting, mas, "initialCondition", ic);
% profile on;
tic
% exogenousInput = {"disturbance", aggregatedDisturbance*0, "S", SLead, "Sr", Sr, "w", w*0, "Pr", Pr, "P", P};
exogenousInput = {"disturbance", aggregatedDisturbance*0, "S", [0 1; -1 0], "Sr", Sr, "w", w*0, "Pr", Pr, "P", P};

% simData = tool.simulate(simulationSetting, mas, "initialCondition", ic, "exogenousInput", exogenousInput,...
%     "disturbanceObserver", distObs, "referenceObserver", arf, "controller", true, "Pr", Pr, "adaptationDelayObserver", 10, "adaptationDelayController", 10);
simData = tool.simulate(simulationSetting, mas, "initialCondition", ic, "exogenousInput", exogenousInput,...
    "referenceObserver", arf, "controller", true, "Pr", Pr, "adaptationDelayObserver", 10, "adaptationDelayController", 10);
toc
% tic
% simData = tool.simulate(simulationSetting, mas, "initialCondition", ic, "exogenousInput", exogenousInput,...
%     "controller", true, "adaptationDelayObserver", 10000);
% figure;
% surf(simData.agent2.x(1).getDomain("z").grid, simData.agent2.x(1).getDomain("t").grid, simData.agent2.x(2).valueDiscrete, "EdgeColor", "interp");
% figure;
% surf(simData.agent2.x(1).getDomain("z").grid, simData.agent2.x(1).getDomain("t").grid, simData.agent2.x(1).valueDiscrete, "EdgeColor", "interp");
plot(simData.agent1.controlOutput);
% toc
% profile viewer
% mas.plotState(simData);
% simData.agent2.observer.v.plot();
% simData.agent2.observer.x.plot();
% simData.agent2.observer.S.plot();
% distObs.plotDisturbanceState(simData);

%Run old method for comparison
% simDataRef = arf.simulate(w, Sr);
% 
% for indAgent = 1:mas.N
%     S_rObs.("agent" + indAgent) = simDataRef.("agent" + (indAgent-1)).S;
%     wObs.("agent" + indAgent) = simDataRef.("agent" + (indAgent-1)).w;
% end

% [systemTarget, controller] = mas.feedforwardControl(S_rObs, Pr, S, P);
% distObserver = DisturbanceObserver(mas, S, P, "c_", 6);
% v = quantity.Discrete([sin(tDomain.grid), cos(tDomain.grid)], tDomain);
% zeroSig = quantity.Discrete.zeros([2, 1], tDomain);
% exogenousSignals = {"disturbance", aggregatedDisturbance, "agent1.reference", wObs.agent1, "agent2.reference", wObs.agent2, "agent3.reference", wObs.agent3, "agent4.reference", wObs.agent4};
% % simDataOld = mas.simulate(simulationSetting, ic, controller, exogenousSignals, distObs);
% % simDataOld = mas.simulate(simulationSetting, ic, controller, exogenousSignals);
% simDataOld = mas.simulate(simulationSetting, ic, struct(), exogenousSignals, distObserver);
% mas.plotState(simDataOld);
% 
% diffSimData = struct();
% for indAgent = 1:mas.N
%     diffSimData.("agent" + indAgent).x = simData.("agent" + indAgent).x - simDataOld.("agent" + indAgent).x;
% end
% mas.plotState(diffSimData);

% eIc = agent2Ic - agent2ObsIc;
% vIc = agent2Dist.at(0) - agent2ObsDistIc;
% [Omega, Eps] = solveDecouplingEquations(distObs, S);
% [L_v, L, M] = distObs.getObserverGains(S);
% 
% e = simData.agent2.x - simData.agent2.observer.x;
% ev = agent2Dist - simData.agent2.observer.v;
% eTil = distObs.backsteppingKernel.transform(e);
% eDec = eTil - Eps*ev;
% 
% ode = ss(S - L_v*mas.E2.'*Eps.at(1), eye(2), eye(2), []);
% targetSystem = model.TransportOde(Lambda, "ode", ode,...
%     "bc0", model.Output("plant.bc0", "C0", - mas.E2.' + Q0*mas.E1.', "C", -distObs.F), ...
%     "bc1", model.Output("plant.bc1", "C1", - mas.E1.'),...
%     "pde2ode", model.Output("plant.pde2ode", "C1", -L_v*mas.E2.'),...
%     "ode2pde", model.Input("plant.ode2pde", "B0", zeros(1, 2)), "input", model.Input("empty", "B0", zeros([1, 2])));
% simDataTarget = targetSystem.simulate("t", tDomain.grid, targetSystem.stateName.ode(1), vIc, targetSystem.stateName.pde(1), distObs.backsteppingKernel.transform(eIc)-Eps*vIc);
% % simDataTarget.plant.x.plot();
% eTilde = simDataTarget.plant.x + Eps*simDataTarget.plant.w;
% eOrig = eTilde - int(distObs.P_I*eTilde.subs("z", "zeta"), "zeta", "z", 1);
% % eTilde.plot();
% % eOrig.plot();
% xObs = simData.agent2.x - eOrig;
% vObs = agent2Dist - simDataTarget.plant.w;
% plot(simData.agent2.x - simData.agent2.observer.x - eOrig);
% plot(-simDataTarget.plant.w);
% plot(simData.agent2.observer.v-simDataTarget.plant.w);
% plot(simData.agent2.observer.v-vObs);
% vObs.plot();
% plot(simData.agent2.observer.x - xObs);
% plot(simData.agent2.observer.x);
% figure;
% surf(simData.agent2.observer.x(1).getDomain("z").grid, simData.agent2.observer.x(1).getDomain("t").grid, simData.agent2.observer.x(1).valueDiscrete, "EdgeColor", "interp");
% plot(simData.agent2.x);
% xObs.plot();
% plot(simData.agent2.observer.v - vObs);
% plot(simData.agent2.observer.x - xObs);

% ode = ss(S, eye(2), eye(2), []);
% backsteppingSystem = model.TransportOde(Lambda.flipDomain("z"), "A0", -Eps*L_v, "ode", ode,...
%     "bc1", model.Output("plant.bc1", "C1", - mas.E2.' + Q0*mas.E1.', "C", -distObs.F.flipDomain("z")), ...
%     "bc0", model.Output("plant.bc0", "C0", - mas.E1.'),...
%     "pde2ode", model.Output("plant.pde2ode", "C0", -L_v*mas.E2.'),...
%     "ode2pde", model.Input("plant.ode2pde", "B1", G2*P, "B0", G3*P, "C", distObs.G1Tilde.flipDomain("z")), "input", model.Input("empty", "B0", zeros([1, 2])));
% simDataBackst = targetSystem.simulate("t", tDomain.grid, targetSystem.stateName.ode(1), [0; 0], targetSystem.stateName.pde(1), flipDomain(distObs.backsteppingKernel.transform(eIc), "z"));
% eBackst = simDataBackst.plant.x.flipDomain("z");
% evBackst = simDataBackst.plant.w;
% eBackstDec = eBackst - Eps*evBackst;
% eBackstOrg = eBackst - int(distObs.P_I*eBackst.subs("z", "zeta"), "zeta", "z", 1);

% data.dist = export.dd(...
%             'M', [tDomain.grid, aggregatedDisturbance(1).valueDiscrete, aggregatedDisturbance(2).valueDiscrete, aggregatedDisturbance(3).valueDiscrete, aggregatedDisturbance(4).valueDiscrete], ...
%             'header', {'t', 'd1', 'd2', 'd3', 'd4'}, ...
%             'filename', 'dist', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );
% data.output = export.dd(...
%             'M', [tDomain.grid, simData.agent1.controlOutput.valueDiscrete, simData.agent2.controlOutput.valueDiscrete, simData.agent3.controlOutput.valueDiscrete, simData.agent4.controlOutput.valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'outputw', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );		
% data.SObs2 = export.dd(...
%             'M', [tDomain.grid, simData.agent2.observer.S(1,1).valueDiscrete, simData.agent2.observer.S(1,2).valueDiscrete, simData.agent2.observer.S(2,1).valueDiscrete, simData.agent2.observer.S(2,2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'SObs2', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );	
% data.SObs2Err = export.dd(...
%             'M', [tDomain.grid, SLead(1,1).valueDiscrete - simData.agent2.observer.S(1,1).valueDiscrete,...
% 			SLead(1,2).valueDiscrete - simData.agent2.observer.S(1,2).valueDiscrete, SLead(2,1).valueDiscrete - simData.agent2.observer.S(2,1).valueDiscrete, ...
% 			SLead(2,2).valueDiscrete - simData.agent2.observer.S(2,2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'SObs2Err', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );
% data.vObs2 = export.dd(...
%             'M', [tDomain.grid, simData.agent2.observer.v(1).valueDiscrete, simData.agent2.observer.v(2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2'}, ...
%             'filename', 'vObs2w', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );	
% data.vObs2Err = export.dd(...
%             'M', [tDomain.grid, vPiece(1).valueDiscrete - simData.agent2.observer.v(1).valueDiscrete, vPiece(2).valueDiscrete - simData.agent2.observer.v(2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2'}, ...
%             'filename', 'vObs2Errw', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );	
% data.vPiece = export.dd(...
%             'M', [tDomain.grid, vPiece(1).valueDiscrete, vPiece(2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2'}, ...
%             'filename', 'vPiece', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );
% zPlot = quantity.Domain("z", linspace(0, 1, 21));
% tPlot = quantity.Domain("t", linspace(0, 25, 500));
% plotVals = simData.agent2.x.changeDomain([tPlot, zPlot]);
% for indDim = 1:mas.n
%     data.("state"+indDim) = export.ddd(...
%         tPlot.grid, ...
%         zPlot.grid, ...
%         plotVals(indDim).valueDiscrete, ...
%         'filename', "statew"+indDim, ...
%         'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data", ...
% 		'N', 60 ...
%         );     
% end
% plotVals = simData.agent2.observer.x.changeDomain([tPlot, zPlot]);
% for indDim = 1:mas.n
%     data.("obsState"+indDim) = export.ddd(...
%         tPlot.grid, ...
%         zPlot.grid, ...
%         plotVals(indDim).valueDiscrete, ...
%         'filename', "obsStatew"+indDim, ...
%         'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data", ...
% 		'N', 60 ...
%         );      
% end
% plotVals = simData.agent2.x.changeDomain([tPlot, zPlot]) - simData.agent2.observer.x.changeDomain([tPlot, zPlot]);
% for indDim = 1:mas.n
%     data.("obsStateErr"+indDim) = export.ddd(...
%         tPlot.grid, ...
%         zPlot.grid, ...
%         plotVals(indDim).valueDiscrete, ...
%         'filename', "obsStateErrw"+indDim, ...
%         'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data", ...
% 		'N', 60 ...
%         );      
% end
% data.S = export.dd(...
%             'M', [tDomain.grid, SLead(1).valueDiscrete, SLead(1,2).valueDiscrete, SLead(2,1).valueDiscrete, SLead(2,2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'S', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );
% data.SrObs2 = export.dd(...
%             'M', [tDomain.grid, simData.agent2.observer.Sr(1,1).valueDiscrete, simData.agent2.observer.Sr(1,2).valueDiscrete, simData.agent2.observer.Sr(2,1).valueDiscrete, simData.agent2.observer.Sr(2,2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'SrObs2w', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );	
% 		
% data.SrObs2Err = export.dd(...
%             'M', [tDomain.grid, Sr(1,1).valueDiscrete - simData.agent2.observer.Sr(1,1).valueDiscrete,...
% 			Sr(1,2).valueDiscrete - simData.agent2.observer.Sr(1,2).valueDiscrete, Sr(2,1).valueDiscrete - simData.agent2.observer.Sr(2,1).valueDiscrete, ...
% 			Sr(2,2).valueDiscrete - simData.agent2.observer.Sr(2,2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'SrObs2Errw', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );
% 		
% data.wObs2Err = export.dd(...
%             'M', [tDomain.grid, w(1).valueDiscrete - simData.agent2.observer.w(1).valueDiscrete, w(2).valueDiscrete - simData.agent2.observer.w(2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2'}, ...
%             'filename', 'wObs2Errw', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );		
% 		
% data.wObs2 = export.dd(...
%             'M', [tDomain.grid, simData.agent2.observer.w(1).valueDiscrete, simData.agent2.observer.w(2).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2'}, ...
%             'filename', 'wObs2w', ...
%             'basepath', "C:\Users\xzb84\Documents\Überblick\AdaptiverStörbeobachter\data" ...
%             );			
% export.Data.exportAll(data);