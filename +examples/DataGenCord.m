zDomain = quantity.Domain("z", linspace(0, 1, 201));
simTime = 20;
tDomain = quantity.Domain("t", linspace(0, simTime, 2001));
syms z t;
basepath = "C:\Users\xzb84\Documents\VSCodeProjects\masversuchsstand\Kurzvortrag\data";
% basepath = "C:\Users\xzb84\matarik\data";

Lambda = quantity.Symbolic(diag([1,-1]), zDomain, "name", "Lambda");
Q0 = 1;
Q1 = 1;

C0 = [1 1]/2;
output = model.Output("controlOutput", "C0", C0);
% g1 = quantity.Symbolic(rectangularPulse(0.45,0.55,z), zDomain, "name", "G1")*3;
g1 = quantity.Discrete(gaussmf(zDomain.grid, [0.1 0.5]), zDomain, "name", "G1");
G1 = [1; 1]*g1;
G2 = [0];
G3 = [0];
G4 = [0];

adjacencyMatrix = [0 0 0 0 0; 1 0 0 0 0; 0 1 0 1 0; 0 0 1 0 1; 0 0 1 1 0];

S = 0;
P = 1;
Sr = 0;
Pr = 1;
% w = quantity.Discrete([sin(tDomain.grid*4*pi), cos(tDomain.grid*4*pi)], tDomain);
w = quantity.Discrete.ones(1, tDomain)*0.5;
v = quantity.Discrete.ones(1, tDomain);

mas = MultiAgent(adjacencyMatrix, Lambda, "output", output, "Q0", Q0, "Q1", Q1, ...
    "G1", G1, "G2", G2, "G3", G3, "G4", G4, "diffusiveDisturbance", false);
system = mas.network.agent(2);
x0 = quantity.Symbolic.ones([size(Lambda,1), 1], zDomain, "name", "x_0");

arf = ReferenceObserver(adjacencyMatrix, 1, 4, 4, 4, 4);
distObs = AdaptiveDisturbanceObserver(mas, length(S), size(P,1), 2, "targetEvOde", [-2], "nCoef", 10);
% simDataRef = arf.simulate(w, S_r);

% for indAgent = 1:mas.N
%     S_rObs.("agent" + indAgent) = simDataRef.("agent" + (indAgent-1)).S;
% end

% [systemTarget, controllerConstSr] = mas.feedforwardControl(S_r, P_r, S, P);
% [systemTarget, controller] = mas.feedforwardControl(S_rObs, P_r, S, P);
simulationSetting = {'t', tDomain.grid};
ic = {};
for indAgent = 1:mas.N
    ic{end+1} = "agent"+indAgent+".x";
    ic{end+1} = quantity.Symbolic([0; 0], zDomain);
    ic{end+1} = "agent"+indAgent+".observer.x";
    ic{end+1} = quantity.Symbolic([0; 0], zDomain);
end
% distObserver = DisturbanceObserver(mas, S, P, "c_", 6);
dAgg = [v*0; v; v*0; v*0; v];

aggregatedDisturbance = [P*v*0; P*v/4; P*v/2; -P*v; -P*v/4];
% aggregatedDisturbanceState = [v*0; -v/2; -v/4; v/3; v/4];
exogenousInput = {"disturbance", aggregatedDisturbance, "S", S*quantity.Discrete.ones(1, tDomain), "Sr", Sr, "w", w, "Pr", Pr, "P", P, "disturbanceState", aggregatedDisturbanceState};
simDataRefTrack = tool.simulate(simulationSetting, mas, "initialCondition", ic, "exogenousInput", exogenousInput,...
    "disturbanceObserver", distObs, "referenceObserver", arf, "controller", true, "Pr", Pr, "adaptationDelayObserver", 2, "adaptationDelayController", 2);

exogenousSignals = {"disturbance", dAgg};
% simDataDistRej = mas.simulate(simulationSetting, ic, controllerConstSr, exogenousSignals, distObserver);

data.cordRefTrack = export.dd(...
            'M', [tDomain.grid, simDataRefTrack.agent2.controlOutput(1).valueDiscrete,...
            simDataRefTrack.agent3.controlOutput(1).valueDiscrete,...
            simDataRefTrack.agent4.controlOutput(1).valueDiscrete,...
            simDataRefTrack.agent5.controlOutput(1).valueDiscrete], ...
            'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
            'filename', 'cordRefTrack', ...
            'basepath', basepath ...
            );

% data.cordDistRej = export.dd(...
%             'M', [tDomain.grid, simDataDistRej.agent2.controlOutput(1).valueDiscrete,...
%             simDataDistRej.agent3.controlOutput(1).valueDiscrete,...
%             simDataDistRej.agent4.controlOutput(1).valueDiscrete,...
%             simDataDistRej.agent5.controlOutput(1).valueDiscrete], ...
%             'header', {'t', 'y1', 'y2', 'y3', 'y4'}, ...
%             'filename', 'cordDistRej', ...
%             'basepath', basepath ...
%             );
        
% data.cordRefObserved = export.dd(...
%             'M', [tDomain.grid,simDataRef.agent1.w(1).valueDiscrete - w(1).valueDiscrete,...
%             simDataRef.agent2.w(1).valueDiscrete - w(1).valueDiscrete,...
%             simDataRef.agent3.w(1).valueDiscrete - w(1).valueDiscrete,...
%             simDataRef.agent4.w(1).valueDiscrete - w(1).valueDiscrete], ...
%             'header', {'t', 'w1', 'w2', 'w3', 'w4'}, ...
%             'filename', 'cordRefObserved', ...
%             'basepath', basepath ...
%             );
        
% data.cordSrObserved = export.dd(...
%             'M', [tDomain.grid,simDataRef.agent1.S(1,1).valueDiscrete - S_r(1,1),...
%             simDataRef.agent1.S(1,2).valueDiscrete - S_r(1,2),...
%             simDataRef.agent1.S(2,1).valueDiscrete - S_r(2,1),...
%             simDataRef.agent1.S(2,2).valueDiscrete - S_r(2,2),...
%             simDataRef.agent2.S(1,1).valueDiscrete - S_r(1,1),...
%             simDataRef.agent2.S(1,2).valueDiscrete - S_r(1,2),...
%             simDataRef.agent2.S(2,1).valueDiscrete - S_r(2,1),...
%             simDataRef.agent2.S(2,2).valueDiscrete - S_r(2,2),...
%             simDataRef.agent3.S(1,1).valueDiscrete - S_r(1,1),...
%             simDataRef.agent3.S(1,2).valueDiscrete - S_r(1,2),...
%             simDataRef.agent3.S(2,1).valueDiscrete - S_r(2,1),...
%             simDataRef.agent3.S(2,2).valueDiscrete - S_r(2,2),...
%             simDataRef.agent4.S(1,1).valueDiscrete - S_r(1,1),...
%             simDataRef.agent4.S(1,2).valueDiscrete - S_r(1,2),...
%             simDataRef.agent4.S(2,1).valueDiscrete - S_r(2,1),...
%             simDataRef.agent4.S(2,2).valueDiscrete - S_r(2,2)], ...
%             'header', {'t', 'S111', 'S112', 'S121', 'S122', 'S211', 'S212', 'S221', 'S222', 'S311', 'S312', 'S321', 'S322', 'S411', 'S412', 'S421', 'S422'}, ...
%             'filename', 'cordSrObserved', ...
%             'basepath', basepath ...
%             );
% data.cordSrObserved = export.dd(...
%             'M', [tDomain.grid,simDataRef.agent1.S.valueDiscrete - S_r,...
%             simDataRef.agent2.S.valueDiscrete - S_r,...
%             simDataRef.agent3.S.valueDiscrete - S_r,...
%             simDataRef.agent4.S.valueDiscrete - S_r], ...
%             'header', {'t', 'S1', 'S2', 'S3', 'S4'}, ...
%             'filename', 'cordSrObserved', ...
%             'basepath', basepath ...
%             );
        
% data.cordDistObserved = export.dd(...
%             'M', [tDomain.grid,simDataDistRej.agent2.observer.disturbanceState.valueDiscrete - v.valueDiscrete,...
%             simDataDistRej.agent3.observer.disturbanceState.valueDiscrete,...
%             simDataDistRej.agent4.observer.disturbanceState.valueDiscrete,...
%             simDataDistRej.agent5.observer.disturbanceState.valueDiscrete - v.valueDiscrete], ...
%             'header', {'t', 'v1', 'v2', 'v3', 'v4'}, ...
%             'filename', 'cordDistObserved', ...
%             'basepath', basepath ...
%             );

timeStamps = [0 1 2 5];
tPlot = quantity.Domain("t", linspace(0, simTime, 301));
zPlot = quantity.Domain("z", linspace(0, 1, 21));
M1 = zPlot.grid;
M2 = zPlot.grid;
header = {"z"};
delay = 0.2;
for i = 2:mas.N
    omega = 2*(5-i)+0.5*[1 1]*simDataRefTrack.("agent"+i).x.subs("t","tau").int("tau", 0, "t");
    omega = omega.changeDomain([tPlot, zPlot]);
    for j = 1:length(timeStamps)
      M1 = cat(2, M1, omega.subs("t", timeStamps(j)).valueDiscrete);
      header{end+1} = "omega"+(i-1)+j;
      if timeStamps(j)>delay
          M1 = cat(2, M1, omega.subs("t", timeStamps(j)-delay).valueDiscrete);
          header{end+1} = "omega"+(i-1)+j+"s";
      end
    end
    
    dataSim = zPlot.grid;
    signalName = ["z"];
                for tIt = 1 : numel(tPlot.grid)
                    signalName = [signalName, "omega" + string(tIt-1)];
                    dataSim = cat(2, dataSim, omega.subs("t", tPlot.grid(tIt)).valueDiscrete);
                end % for tIt = tSample.'

    exportObj = export.dd(...
        "M", dataSim, ...
        "header", table2cell(array2table(signalName)).', ...
        "filename", "simRefTrack"+(i-1), ...
        "basepath", basepath);
    exportObj.export("silent", true);
    
%     omega = 2*(5-i)+0.5*[1 1]*simDataDistRej.("agent"+i).x.subs("t","tau").int("tau", 0, "t").changeDomain([tPlot, zPlot]);
%     omega = omega.changeDomain([tPlot, zPlot]);
%     for j = 1:length(timeStamps)
%       M2 = cat(2, M2, omega.subs("t", timeStamps(j)).valueDiscrete);
%       if timeStamps(j)>delay
%          M2 = cat(2, M2, omega.subs("t", timeStamps(j)-delay).valueDiscrete); 
%       end
%     end
%     
%     dataSim = zPlot.grid;
%     signalName = ["z"];
%                 for tIt = 1 : numel(tPlot.grid)
%                     signalName = [signalName, "omega" + string(tIt-1)];
%                     dataSim = cat(2, dataSim, omega.subs("t", tPlot.grid(tIt)).valueDiscrete);
%                 end % for tIt = tSample.'
% 
%     exportObj = export.dd(...
%         "M", dataSim, ...
%         "header", table2cell(array2table(signalName)).', ...
%         "filename", "simDistRej"+(i-1), ...
%         "basepath", basepath);
%     exportObj.export("silent", true);
%      
%     
end
% 
% data.cordRefTrackSnap = export.dd(...
%             'M', M1, ...
%             'header', header, ...
%             'filename', 'cordRefTrackSnap', ...
%             'basepath', basepath ...
%             );
% 
% data.cordDistRejSnap = export.dd(...
%             'M', M2, ...
%             'header', header, ...
%             'filename', 'cordDistRejSnap', ...
%             'basepath', basepath ...
%             );

data.G1 = export.dd(...
            'M', [zDomain.grid, g1.valueDiscrete], ...
            'header', {'z', 'g1'}, ...
            'filename', 'G1', ...
            'basepath', basepath ...
            );
        
% data.sincos = export.dd(...
%     'M', [tDomain.grid, w(1).valueDiscrete], ...
%     'header', {'t', 'r1'}, ...
%     'filename', 'sincos', ...
%     'basepath', basepath ...
%     );

        
export.Data.exportAll(data);

% invLambda = 1/Lambda;
% phi = int(subs(invLambda, "z", "zeta"), "zeta", 0, "z");
% eigVals = 0;
% 
% observable = true;
% Ns = [];
% for indEv = 1:length(eigVals)
%     psi = expm(eigVals(indEv)*(phi - phi.subs("z", "zeta")));
%     M = psi.subs("zeta", 0)*(mas.E1+mas.E2*Q0)...
%         - int(psi*invLambda.subs("z", "zeta")*controller.backsteppingKernel.getA0Target().subs("z","zeta"), "zeta", 0, "z");
%     N = [1 1]*M.at(0);
%     Ns = [Ns, det(N)];
%     if N == 0
%        observable = false; 
%     end
% end
% 
% mas.network.agent(1).settlingTime
% mas.network.agent(1).numeratorOfTransferFunction();